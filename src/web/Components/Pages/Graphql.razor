@page "/graphql"
@using Microsoft.AspNetCore.Components.QuickGrid

@inject IStartrekClient startrekClient
@rendermode InteractiveServer

<PageTitle>Series by GraphQL</PageTitle>

<h1>Series by GraphQL</h1>

<UseGetPlanets Context="result">
    <ChildContent>
        <div class="grid">
            <QuickGrid Items="result.Planets2!.AsQueryable()">
                <PropertyColumn Property="@(s => s.Id)" Sortable="true" />
                <PropertyColumn Property="@(s => s.Name)" Sortable="true" />
                <PropertyColumn Property="@(s => s.Coordinates)" Sortable="true" />
            </QuickGrid>
        </div>
    </ChildContent>
    <ErrorContent>
        Something went wrong ...<br />
        @result.First().Message
    </ErrorContent>
    <LoadingContent>
        Loading ...
    </LoadingContent>
</UseGetPlanets>
@* 
  <hr>
  <h2>Flatten Result</h2>

  @if (series.Count() <= 0)
  {
      <p><em>Loading...</em></p>
  }
  else
  {
      <div class="grid">
          <QuickGrid Items="@flat" Virtualize="true" >
              <PropertyColumn Property="@(s => s.serie)" Sortable="true" />
              <PropertyColumn Property="@(s => s.character)" Sortable="true" />
          </QuickGrid>
      </div>
  } *@


@code {
    //IEnumerable<IGetPlanets_Planets2_Planet> series = new List<IGetPlanets_Planets2_Planet>();
    //private record flatresult(string serie, string character);
    //IQueryable<flatresult>? flat = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // var temp = await startrekClient.GetPlanets.ExecuteAsync();

        // series = temp.Data.Planets2.AsQueryable();
        // flat = series.SelectMany(s => s.Character.Items.Select(f => new flatresult(s.SerieName, f.CharacterName ))).AsQueryable();
    }
}


