@page "/test"

@using Microsoft.AspNetCore.Components.QuickGrid
@using startrekdemo.Domain

@inject HttpClient httpClient
@rendermode InteractiveServer

<PageTitle>Virtualize QuickGrid</PageTitle>

<h1>Virtualize QuickGrid</h1>

<div class="grid">
    <QuickGrid ItemsProvider="@charactersProvider" Virtualize="true">
        <PropertyColumn Property="@(s => s.Name)" Sortable="true" />
    </QuickGrid>
</div>

<div class="inline-block my-1">
    Total: <strong>@numResults results</strong>
</div>


@code {

    GridItemsProvider<Character> charactersProvider;

    int numResults;
    string curChar = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        charactersProvider = async request =>
        {
            var option = new Dictionary<string, object?>
                                        {
                                            {"skip", request.StartIndex },
                                            {"limit", request.Count }
                                        };
            var response = await httpClient.GetFromJsonAsync<CharacterList>("character", request.CancellationToken);

            // Separately display the item count
            if (response.value.Count != numResults && !request.CancellationToken.IsCancellationRequested)
            {
                numResults = response.value.Count;
                StateHasChanged();
            }

            return GridItemsProviderResult.From(
                       items: response!.value,
                       totalItemCount: response.value.Count);
        };
    }

}


