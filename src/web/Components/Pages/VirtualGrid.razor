@page "/virtualgrid"
@using Microsoft.AspNetCore.Components.QuickGrid
@using startrekdemo.Domain

@inject IStartrekClient startrekClient
@rendermode InteractiveServer

<PageTitle>Virtualize QuickGrid</PageTitle>

<h1>Virtualize QuickGrid</h1>

 <div class="grid">
    <QuickGrid ItemsProvider="@planetProvider" Virtualize="true">
        <PropertyColumn Property="@(s => s.Id)" Sortable="true" />
        <PropertyColumn Property="@(s => s.Name)" Sortable="true" />
        <PropertyColumn Property="@(s => s.Coordinates)" Sortable="true" />
     </QuickGrid>
 </div>

<div class="inline-block my-1">
    Total: <strong>@numResults results</strong>
</div>


@code {

    GridItemsProvider<Planet> planetProvider;

    int numResults = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        planetProvider = async request =>
        {
            var response = await startrekClient.Getmyplanets.ExecuteAsync(request.StartIndex, request.Count, request.CancellationToken);

    
            var planets = new List<Planet>();
            var itemCnt = 0;

            // if (response.Data.Planets.Items.Count != numResults && !request.CancellationToken.IsCancellationRequested)
            // {
            //     numResults = response.Data.Planets.Items.Count;
            //     StateHasChanged();
            // }

            if (response.Data != null)
            {
                planets = response.Data.Planets.Items.Select(p => new Planet { Id = p.Id, Name = p.Name, Coordinates = p.Coordinates }).ToList();
                itemCnt = numResults;
            }
                

            return GridItemsProviderResult.From(
                items: planets,
                totalItemCount: itemCnt);
        };

        numResults = (await startrekClient.Getmyplanets.ExecuteAsync(null, null)).Data.Planets.Items.Count;
    }




}


