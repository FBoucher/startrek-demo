schema {
  query: Query
  mutation: Mutation
}

enum OrderBy {
  ASC
  DESC
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
  LocalTime: LocalTime
}

type Actor {
  Id: Int!
  Name: String!
  BirthYear: Int!
  character("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: CharacterFilterInput "Ordering options for query" orderBy: CharacterOrderByInput): CharacterConnection
}

type Character {
  Id: Int!
  Name: String!
  ActorId: Int!
  Stardate: Decimal
  series("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: SeriesFilterInput "Ordering options for query" orderBy: SeriesOrderByInput): SeriesConnection
  species("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: SpeciesFilterInput "Ordering options for query" orderBy: SpeciesOrderByInput): SpeciesConnection
  actor("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: ActorFilterInput "Ordering options for query" orderBy: ActorOrderByInput): ActorConnection
}

type Series {
  Id: Int!
  Name: String!
  character("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: CharacterFilterInput "Ordering options for query" orderBy: CharacterOrderByInput): CharacterConnection
}

type Species {
  Id: Int!
  Name: String!
  character("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: CharacterFilterInput "Ordering options for query" orderBy: CharacterOrderByInput): CharacterConnection
}

type DbOperationResult {
  "Contains result for mutation execution"
  result: String
}

"Order by input for Actor GraphQL type"
input ActorOrderByInput {
  "Order by options for Id"
  Id: OrderBy
  "Order by options for Name"
  Name: OrderBy
  "Order by options for BirthYear"
  BirthYear: OrderBy
  "Order by options for character"
  character: CharacterOrderByInput
  "Conditions to be treated as AND operations"
  and: [ActorOrderByInput]
  "Conditions to be treated as OR operations"
  or: [ActorOrderByInput]
}

"Input type for adding Int filters"
input IntFilterInput {
  "Equals"
  eq: Int
  "Greater Than"
  gt: Int
  "Greater Than or Equal To"
  gte: Int
  "Less Than"
  lt: Int
  "Less Than or Equal To"
  lte: Int
  "Not Equals"
  neq: Int
  "Not null test"
  isNull: Boolean
}

"Input type for adding String filters"
input StringFilterInput {
  "Equals"
  eq: String
  "Contains"
  contains: String
  "Not Contains"
  notContains: String
  "Starts With"
  startsWith: String
  "Ends With"
  endsWith: String
  "Not Equals"
  neq: String
  "Case Insensitive"
  caseInsensitive: Boolean = false
  "Is null test"
  isNull: Boolean
}

"Filter input for Actor GraphQL type"
input ActorFilterInput {
  "Filter options for Id"
  Id: IntFilterInput
  "Filter options for Name"
  Name: StringFilterInput
  "Filter options for BirthYear"
  BirthYear: IntFilterInput
  "Filter options for character"
  character: CharacterFilterInput
  "Conditions to be treated as AND operations"
  and: [ActorFilterInput]
  "Conditions to be treated as OR operations"
  or: [ActorFilterInput]
}

"Order by input for Character GraphQL type"
input CharacterOrderByInput {
  "Order by options for Id"
  Id: OrderBy
  "Order by options for Name"
  Name: OrderBy
  "Order by options for ActorId"
  ActorId: OrderBy
  "Order by options for Stardate"
  Stardate: OrderBy
  "Order by options for series"
  series: SeriesOrderByInput
  "Order by options for species"
  species: SpeciesOrderByInput
  "Order by options for actor"
  actor: ActorOrderByInput
  "Conditions to be treated as AND operations"
  and: [CharacterOrderByInput]
  "Conditions to be treated as OR operations"
  or: [CharacterOrderByInput]
}

"Input type for adding Decimal filters"
input DecimalFilterInput {
  "Equals"
  eq: Decimal
  "Greater Than"
  gt: Decimal
  "Greater Than or Equal To"
  gte: Decimal
  "Less Than"
  lt: Decimal
  "Less Than or Equal To"
  lte: Decimal
  "Not Equals"
  neq: Decimal
  "Not null test"
  isNull: Boolean
}

"Filter input for Character GraphQL type"
input CharacterFilterInput {
  "Filter options for Id"
  Id: IntFilterInput
  "Filter options for Name"
  Name: StringFilterInput
  "Filter options for ActorId"
  ActorId: IntFilterInput
  "Filter options for Stardate"
  Stardate: DecimalFilterInput
  "Filter options for series"
  series: SeriesFilterInput
  "Filter options for species"
  species: SpeciesFilterInput
  "Filter options for actor"
  actor: ActorFilterInput
  "Conditions to be treated as AND operations"
  and: [CharacterFilterInput]
  "Conditions to be treated as OR operations"
  or: [CharacterFilterInput]
}

"Order by input for Series GraphQL type"
input SeriesOrderByInput {
  "Order by options for Id"
  Id: OrderBy
  "Order by options for Name"
  Name: OrderBy
  "Order by options for character"
  character: CharacterOrderByInput
  "Conditions to be treated as AND operations"
  and: [SeriesOrderByInput]
  "Conditions to be treated as OR operations"
  or: [SeriesOrderByInput]
}

"Filter input for Series GraphQL type"
input SeriesFilterInput {
  "Filter options for Id"
  Id: IntFilterInput
  "Filter options for Name"
  Name: StringFilterInput
  "Filter options for character"
  character: CharacterFilterInput
  "Conditions to be treated as AND operations"
  and: [SeriesFilterInput]
  "Conditions to be treated as OR operations"
  or: [SeriesFilterInput]
}

"Order by input for Species GraphQL type"
input SpeciesOrderByInput {
  "Order by options for Id"
  Id: OrderBy
  "Order by options for Name"
  Name: OrderBy
  "Order by options for character"
  character: CharacterOrderByInput
  "Conditions to be treated as AND operations"
  and: [SpeciesOrderByInput]
  "Conditions to be treated as OR operations"
  or: [SpeciesOrderByInput]
}

"Filter input for Species GraphQL type"
input SpeciesFilterInput {
  "Filter options for Id"
  Id: IntFilterInput
  "Filter options for Name"
  Name: StringFilterInput
  "Filter options for character"
  character: CharacterFilterInput
  "Conditions to be treated as AND operations"
  and: [SpeciesFilterInput]
  "Conditions to be treated as OR operations"
  or: [SpeciesFilterInput]
}

type Query {
  "Get a list of all the Actor items from the database"
  actors("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: ActorFilterInput "Ordering options for query" orderBy: ActorOrderByInput): ActorConnection!
  "Get a Actor from the database by its ID\/primary key"
  actor_by_pk(Id: Int!): Actor
  "Get a list of all the Character items from the database"
  characters("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: CharacterFilterInput "Ordering options for query" orderBy: CharacterOrderByInput): CharacterConnection!
  "Get a Character from the database by its ID\/primary key"
  character_by_pk(Id: Int!): Character
  "Get a list of all the Series items from the database"
  series("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: SeriesFilterInput "Ordering options for query" orderBy: SeriesOrderByInput): SeriesConnection!
  "Get a Series from the database by its ID\/primary key"
  series_by_pk(Id: Int!): Series
  "Get a list of all the Species items from the database"
  species("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: SpeciesFilterInput "Ordering options for query" orderBy: SpeciesOrderByInput): SpeciesConnection!
  "Get a Species from the database by its ID\/primary key"
  species_by_pk(Id: Int!): Species
}

"The return object from a filter query that supports a pagination token for paging through results"
type ActorConnection {
  "The list of items that matched the filter"
  items: [Actor!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

"The return object from a filter query that supports a pagination token for paging through results"
type CharacterConnection {
  "The list of items that matched the filter"
  items: [Character!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

"The return object from a filter query that supports a pagination token for paging through results"
type SeriesConnection {
  "The list of items that matched the filter"
  items: [Series!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

"The return object from a filter query that supports a pagination token for paging through results"
type SpeciesConnection {
  "The list of items that matched the filter"
  items: [Species!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

type Mutation {
  "Creates a new Actor"
  createActor("Input representing all the fields for creating Actor" item: CreateActorInput!): Actor
  "Updates a Actor"
  updateActor("The ID of the item being updated." Id: Int! "Input representing all the fields for updating Actor" item: UpdateActorInput!): Actor
  "Delete a Actor"
  deleteActor("The ID of the item being deleted." Id: Int!): Actor
  "Creates a new Character"
  createCharacter("Input representing all the fields for creating Character" item: CreateCharacterInput!): Character
  "Updates a Character"
  updateCharacter("The ID of the item being updated." Id: Int! "Input representing all the fields for updating Character" item: UpdateCharacterInput!): Character
  "Delete a Character"
  deleteCharacter("The ID of the item being deleted." Id: Int!): Character
  "Creates a new Series"
  createSeries("Input representing all the fields for creating Series" item: CreateSeriesInput!): Series
  "Updates a Series"
  updateSeries("The ID of the item being updated." Id: Int! "Input representing all the fields for updating Series" item: UpdateSeriesInput!): Series
  "Delete a Series"
  deleteSeries("The ID of the item being deleted." Id: Int!): Series
  "Creates a new Species"
  createSpecies("Input representing all the fields for creating Species" item: CreateSpeciesInput!): Species
  "Updates a Species"
  updateSpecies("The ID of the item being updated." Id: Int! "Input representing all the fields for updating Species" item: UpdateSpeciesInput!): Species
  "Delete a Species"
  deleteSpecies("The ID of the item being deleted." Id: Int!): Species
}

"Input type for creating Actor"
input CreateActorInput {
  "Input for field Id on type CreateActorInput"
  Id: Int!
  "Input for field Name on type CreateActorInput"
  Name: String!
  "Input for field BirthYear on type CreateActorInput"
  BirthYear: Int!
}

"Input type for updating Actor"
input UpdateActorInput {
  "Input for field Id on type UpdateActorInput"
  Id: Int
  "Input for field Name on type UpdateActorInput"
  Name: String
  "Input for field BirthYear on type UpdateActorInput"
  BirthYear: Int
}

"Input type for creating Character"
input CreateCharacterInput {
  "Input for field Id on type CreateCharacterInput"
  Id: Int!
  "Input for field Name on type CreateCharacterInput"
  Name: String!
  "Input for field ActorId on type CreateCharacterInput"
  ActorId: Int!
  "Input for field Stardate on type CreateCharacterInput"
  Stardate: Decimal
}

"Input type for updating Character"
input UpdateCharacterInput {
  "Input for field Id on type UpdateCharacterInput"
  Id: Int
  "Input for field Name on type UpdateCharacterInput"
  Name: String
  "Input for field ActorId on type UpdateCharacterInput"
  ActorId: Int
  "Input for field Stardate on type UpdateCharacterInput"
  Stardate: Decimal
}

"Input type for creating Series"
input CreateSeriesInput {
  "Input for field Id on type CreateSeriesInput"
  Id: Int!
  "Input for field Name on type CreateSeriesInput"
  Name: String!
}

"Input type for updating Series"
input UpdateSeriesInput {
  "Input for field Id on type UpdateSeriesInput"
  Id: Int
  "Input for field Name on type UpdateSeriesInput"
  Name: String
}

"Input type for creating Species"
input CreateSpeciesInput {
  "Input for field Id on type CreateSpeciesInput"
  Id: Int!
  "Input for field Name on type CreateSpeciesInput"
  Name: String!
}

"Input type for updating Species"
input UpdateSpeciesInput {
  "Input for field Id on type UpdateSpeciesInput"
  Id: Int
  "Input for field Name on type UpdateSpeciesInput"
  Name: String
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"IEEE 754 32 bit float"
scalar Single

"The built-in `Decimal` scalar type."
scalar Decimal

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar ByteArray

"LocalTime is an immutable struct representing a time of day, with no reference to a particular calendar, time zone or date."
scalar LocalTime

"The `@oneOf` directive is used within the type system definition language\n to indicate:\n\n - an Input Object is a Oneof Input Object, or\n - an Object Type's Field is a Oneof Field."
directive @oneOf on INPUT_OBJECT

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"A directive to indicate the type maps to a storable entity not a nested entity."
directive @model("Underlying name of the database entity." name: String) on OBJECT | FIELD_DEFINITION

"A directive to indicate the relationship between two tables"
directive @relationship("The name of the GraphQL type the relationship targets" target: String "The relationship cardinality" cardinality: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"A directive to indicate the primary key field of an item."
directive @primaryKey("The underlying database type." databaseType: String) on FIELD_DEFINITION

"The default value to be used when creating an item."
directive @defaultValue(value: DefaultValue) on FIELD_DEFINITION

"Indicates that a field is auto generated by the database."
directive @autoGenerated on FIELD_DEFINITION